package com.example.madeleine.movieapp;

import com.example.madeleine.movieapp.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "MOVIE_INFO".
 */
public class MovieInfo {

    private String imdbID;
    private String title;
    private Long detailId;
    private Long queryId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MovieInfoDao myDao;

    private MovieDetail movieDetail;
    private Long movieDetail__resolvedKey;


    public MovieInfo() {
    }

    public MovieInfo(String imdbID, String title, Long detailId, Long queryId) {
        this.imdbID = imdbID;
        this.title = title;
        this.detailId = detailId;
        this.queryId = queryId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMovieInfoDao() : null;
    }

    public String getImdbID() {
        return imdbID;
    }

    public void setImdbID(String imdbID) {
        this.imdbID = imdbID;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public Long getDetailId() {
        return detailId;
    }

    public void setDetailId(Long detailId) {
        this.detailId = detailId;
    }

    public Long getQueryId() {
        return queryId;
    }

    public void setQueryId(Long queryId) {
        this.queryId = queryId;
    }

    /** To-one relationship, resolved on first access. */
    public MovieDetail getMovieDetail() {
        Long __key = this.detailId;
        if (movieDetail__resolvedKey == null || !movieDetail__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MovieDetailDao targetDao = daoSession.getMovieDetailDao();
            MovieDetail movieDetailNew = targetDao.load(__key);
            synchronized (this) {
                movieDetail = movieDetailNew;
            	movieDetail__resolvedKey = __key;
            }
        }
        return movieDetail;
    }

    public void setMovieDetail(MovieDetail movieDetail) {
        synchronized (this) {
            this.movieDetail = movieDetail;
            detailId = movieDetail == null ? null : movieDetail.getId();
            movieDetail__resolvedKey = detailId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
