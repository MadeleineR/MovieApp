package com.example.madeleine.movieapp;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.madeleine.movieapp.MovieDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MOVIE_DETAIL".
*/
public class MovieDetailDao extends AbstractDao<MovieDetail, Long> {

    public static final String TABLENAME = "MOVIE_DETAIL";

    /**
     * Properties of entity MovieDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Year = new Property(1, String.class, "year", false, "YEAR");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property Runtime = new Property(3, String.class, "runtime", false, "RUNTIME");
        public final static Property Poster = new Property(4, String.class, "poster", false, "POSTER");
        public final static Property Rated = new Property(5, String.class, "rated", false, "RATED");
        public final static Property Released = new Property(6, String.class, "released", false, "RELEASED");
        public final static Property Genre = new Property(7, String.class, "genre", false, "GENRE");
        public final static Property Director = new Property(8, String.class, "director", false, "DIRECTOR");
        public final static Property Writer = new Property(9, String.class, "writer", false, "WRITER");
        public final static Property Actors = new Property(10, String.class, "actors", false, "ACTORS");
        public final static Property Plot = new Property(11, String.class, "plot", false, "PLOT");
        public final static Property Language = new Property(12, String.class, "language", false, "LANGUAGE");
        public final static Property Awards = new Property(13, String.class, "awards", false, "AWARDS");
        public final static Property Metascore = new Property(14, String.class, "metascore", false, "METASCORE");
        public final static Property ImdbRating = new Property(15, String.class, "imdbRating", false, "IMDB_RATING");
        public final static Property ImdbVotes = new Property(16, String.class, "imdbVotes", false, "IMDB_VOTES");
        public final static Property Response = new Property(17, String.class, "response", false, "RESPONSE");
        public final static Property Country = new Property(18, String.class, "country", false, "COUNTRY");
    };


    public MovieDetailDao(DaoConfig config) {
        super(config);
    }
    
    public MovieDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MOVIE_DETAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"YEAR\" TEXT," + // 1: year
                "\"TYPE\" TEXT," + // 2: type
                "\"RUNTIME\" TEXT," + // 3: runtime
                "\"POSTER\" TEXT," + // 4: poster
                "\"RATED\" TEXT," + // 5: rated
                "\"RELEASED\" TEXT," + // 6: released
                "\"GENRE\" TEXT," + // 7: genre
                "\"DIRECTOR\" TEXT," + // 8: director
                "\"WRITER\" TEXT," + // 9: writer
                "\"ACTORS\" TEXT," + // 10: actors
                "\"PLOT\" TEXT," + // 11: plot
                "\"LANGUAGE\" TEXT," + // 12: language
                "\"AWARDS\" TEXT," + // 13: awards
                "\"METASCORE\" TEXT," + // 14: metascore
                "\"IMDB_RATING\" TEXT," + // 15: imdbRating
                "\"IMDB_VOTES\" TEXT," + // 16: imdbVotes
                "\"RESPONSE\" TEXT," + // 17: response
                "\"COUNTRY\" TEXT);"); // 18: country
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MOVIE_DETAIL\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MovieDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(2, year);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String runtime = entity.getRuntime();
        if (runtime != null) {
            stmt.bindString(4, runtime);
        }
 
        String poster = entity.getPoster();
        if (poster != null) {
            stmt.bindString(5, poster);
        }
 
        String rated = entity.getRated();
        if (rated != null) {
            stmt.bindString(6, rated);
        }
 
        String released = entity.getReleased();
        if (released != null) {
            stmt.bindString(7, released);
        }
 
        String genre = entity.getGenre();
        if (genre != null) {
            stmt.bindString(8, genre);
        }
 
        String director = entity.getDirector();
        if (director != null) {
            stmt.bindString(9, director);
        }
 
        String writer = entity.getWriter();
        if (writer != null) {
            stmt.bindString(10, writer);
        }
 
        String actors = entity.getActors();
        if (actors != null) {
            stmt.bindString(11, actors);
        }
 
        String plot = entity.getPlot();
        if (plot != null) {
            stmt.bindString(12, plot);
        }
 
        String language = entity.getLanguage();
        if (language != null) {
            stmt.bindString(13, language);
        }
 
        String awards = entity.getAwards();
        if (awards != null) {
            stmt.bindString(14, awards);
        }
 
        String metascore = entity.getMetascore();
        if (metascore != null) {
            stmt.bindString(15, metascore);
        }
 
        String imdbRating = entity.getImdbRating();
        if (imdbRating != null) {
            stmt.bindString(16, imdbRating);
        }
 
        String imdbVotes = entity.getImdbVotes();
        if (imdbVotes != null) {
            stmt.bindString(17, imdbVotes);
        }
 
        String response = entity.getResponse();
        if (response != null) {
            stmt.bindString(18, response);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(19, country);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MovieDetail readEntity(Cursor cursor, int offset) {
        MovieDetail entity = new MovieDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // year
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // runtime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // poster
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // rated
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // released
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // genre
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // director
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // writer
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // actors
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // plot
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // language
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // awards
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // metascore
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // imdbRating
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // imdbVotes
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // response
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // country
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MovieDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setYear(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRuntime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPoster(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRated(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setReleased(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGenre(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDirector(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setWriter(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setActors(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPlot(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLanguage(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAwards(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setMetascore(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setImdbRating(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setImdbVotes(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setResponse(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setCountry(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MovieDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MovieDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
